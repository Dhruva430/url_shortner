// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createOAuthUser = `-- name: CreateOAuthUser :one
INSERT INTO users (username,email, ip_address, provider, provider_id, image)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at
`

type CreateOAuthUserParams struct {
	Username   string         `json:"username"`
	Email      string         `json:"email"`
	IpAddress  string         `json:"ip_address"`
	Provider   string         `json:"provider"`
	ProviderID string         `json:"provider_id"`
	Image      sql.NullString `json:"image"`
}

func (q *Queries) CreateOAuthUser(ctx context.Context, arg CreateOAuthUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOAuthUser,
		arg.Username,
		arg.Email,
		arg.IpAddress,
		arg.Provider,
		arg.ProviderID,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createShortURL = `-- name: CreateShortURL :one
INSERT INTO urls (original_url, short_code, click_count)
VALUES ($1, $2, 0)
RETURNING id, original_url, short_code, click_count, created_at
`

type CreateShortURLParams struct {
	OriginalUrl string `json:"original_url"`
	ShortCode   string `json:"short_code"`
}

func (q *Queries) CreateShortURL(ctx context.Context, arg CreateShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createShortURL, arg.OriginalUrl, arg.ShortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash,ip_address)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	IpAddress    string `json:"ip_address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.IpAddress,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOriginalURL = `-- name: GetOriginalURL :one
SELECT id, original_url, short_code, click_count, created_at FROM urls
WHERE short_code = $1
`

func (q *Queries) GetOriginalURL(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getOriginalURL, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users
WHERE provider = $1 AND provider_id = $2
`

type GetUserByProviderParams struct {
	Provider   string `json:"provider"`
	ProviderID string `json:"provider_id"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProvider, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementClickCount = `-- name: IncrementClickCount :exec
UPDATE urls
SET click_count = click_count + 1
WHERE short_code = $1
`

func (q *Queries) IncrementClickCount(ctx context.Context, shortCode string) error {
	_, err := q.db.ExecContext(ctx, incrementClickCount, shortCode)
	return err
}
