// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createOAuthUser = `-- name: CreateOAuthUser :one
INSERT INTO users (username,email, ip_address, provider, provider_id, image)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at
`

type CreateOAuthUserParams struct {
	Username   string         `json:"username"`
	Email      string         `json:"email"`
	IpAddress  string         `json:"ip_address"`
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
	Image      sql.NullString `json:"image"`
}

func (q *Queries) CreateOAuthUser(ctx context.Context, arg CreateOAuthUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOAuthUser,
		arg.Username,
		arg.Email,
		arg.IpAddress,
		arg.Provider,
		arg.ProviderID,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createShortURL = `-- name: CreateShortURL :one
INSERT INTO urls (original_url, short_code, user_id, click_count)
VALUES ($1, $2, $3, 0)
RETURNING id, original_url, short_code, click_count, created_at, user_id
`

type CreateShortURLParams struct {
	OriginalUrl string        `json:"original_url"`
	ShortCode   string        `json:"short_code"`
	UserID      sql.NullInt32 `json:"user_id"`
}

func (q *Queries) CreateShortURL(ctx context.Context, arg CreateShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createShortURL, arg.OriginalUrl, arg.ShortCode, arg.UserID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash,ip_address)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	IpAddress    string `json:"ip_address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.IpAddress,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnalyticsShortcode = `-- name: GetAnalyticsShortcode :many
SELECT 
  u.short_code, 
  u.original_url, 
  u.click_count, 
  v.clicked_at, 
  v.ip_address, 
  v.user_agent,
  v.referrer,
  v.country,
  v.region,
  v.city,
  u.user_id
FROM urls u
JOIN url_visits v ON u.id = v.url_id
WHERE u.short_code = $1
ORDER BY v.clicked_at DESC
`

type GetAnalyticsShortcodeRow struct {
	ShortCode   string         `json:"short_code"`
	OriginalUrl string         `json:"original_url"`
	ClickCount  int32          `json:"click_count"`
	ClickedAt   sql.NullTime   `json:"clicked_at"`
	IpAddress   string         `json:"ip_address"`
	UserAgent   string         `json:"user_agent"`
	Referrer    sql.NullString `json:"referrer"`
	Country     sql.NullString `json:"country"`
	Region      sql.NullString `json:"region"`
	City        sql.NullString `json:"city"`
	UserID      sql.NullInt32  `json:"user_id"`
}

func (q *Queries) GetAnalyticsShortcode(ctx context.Context, shortCode string) ([]GetAnalyticsShortcodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAnalyticsShortcode, shortCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnalyticsShortcodeRow
	for rows.Next() {
		var i GetAnalyticsShortcodeRow
		if err := rows.Scan(
			&i.ShortCode,
			&i.OriginalUrl,
			&i.ClickCount,
			&i.ClickedAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.Referrer,
			&i.Country,
			&i.Region,
			&i.City,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOriginalURL = `-- name: GetOriginalURL :one
SELECT id, original_url, short_code, click_count, created_at, user_id FROM urls
WHERE short_code = $1
`

func (q *Queries) GetOriginalURL(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getOriginalURL, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getURLVisits = `-- name: GetURLVisits :many
SELECT id, url_id, user_id, ip_address, user_agent, referrer, country, region, city, clicked_at FROM url_visits
WHERE url_id = $1
`

func (q *Queries) GetURLVisits(ctx context.Context, urlID int32) ([]UrlVisit, error) {
	rows, err := q.db.QueryContext(ctx, getURLVisits, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UrlVisit
	for rows.Next() {
		var i UrlVisit
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Referrer,
			&i.Country,
			&i.Region,
			&i.City,
			&i.ClickedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users
WHERE provider = $1 AND provider_id = $2
`

type GetUserByProviderParams struct {
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProvider, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderID = `-- name: GetUserByProviderID :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users WHERE provider = $1 AND provider_id = $2 LIMIT 1
`

type GetUserByProviderIDParams struct {
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
}

func (q *Queries) GetUserByProviderID(ctx context.Context, arg GetUserByProviderIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderID, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementClickCount = `-- name: IncrementClickCount :exec
UPDATE urls
SET click_count = click_count + 1
WHERE short_code = $1
`

func (q *Queries) IncrementClickCount(ctx context.Context, shortCode string) error {
	_, err := q.db.ExecContext(ctx, incrementClickCount, shortCode)
	return err
}
