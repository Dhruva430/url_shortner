// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOAuthUser = `-- name: CreateOAuthUser :one
INSERT INTO users (username, email,password_hash, ip_address, provider, provider_id, image)
VALUES ($1, $2, $3, $4, $5, $6,$7)
RETURNING id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at
`

type CreateOAuthUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	IpAddress    sql.NullString `json:"ip_address"`
	Provider     sql.NullString `json:"provider"`
	ProviderID   sql.NullString `json:"provider_id"`
	Image        sql.NullString `json:"image"`
}

func (q *Queries) CreateOAuthUser(ctx context.Context, arg CreateOAuthUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOAuthUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.IpAddress,
		arg.Provider,
		arg.ProviderID,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createShortURL = `-- name: CreateShortURL :one
INSERT INTO urls (
  original_url,
  short_code,
  title,
  password_hash,
  expire_at,
  user_id,
  thumbnail,
  click_count
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, 0
)
RETURNING id, original_url, title, short_code, thumbnail, click_count, password_hash, created_at, expire_at, user_id
`

type CreateShortURLParams struct {
	OriginalUrl  string         `json:"original_url"`
	ShortCode    string         `json:"short_code"`
	Title        sql.NullString `json:"title"`
	PasswordHash sql.NullString `json:"password_hash"`
	ExpireAt     sql.NullTime   `json:"expire_at"`
	UserID       sql.NullInt32  `json:"user_id"`
	Thumbnail    sql.NullString `json:"thumbnail"`
}

func (q *Queries) CreateShortURL(ctx context.Context, arg CreateShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createShortURL,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.Title,
		arg.PasswordHash,
		arg.ExpireAt,
		arg.UserID,
		arg.Thumbnail,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Title,
		&i.ShortCode,
		&i.Thumbnail,
		&i.ClickCount,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ExpireAt,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, ip_address)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at
`

type CreateUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	IpAddress    sql.NullString `json:"ip_address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.IpAddress,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteURLByShortCode = `-- name: DeleteURLByShortCode :exec
DELETE FROM urls
WHERE short_code = $1
`

func (q *Queries) DeleteURLByShortCode(ctx context.Context, shortCode string) error {
	_, err := q.db.ExecContext(ctx, deleteURLByShortCode, shortCode)
	return err
}

const getAnalyticsShortcode = `-- name: GetAnalyticsShortcode :many
SELECT 
  u.short_code, 
  u.original_url, 
  u.click_count, 
  v.clicked_at, 
  v.ip_address, 
  v.user_agent,
  v.referrer,
  v.country,
  v.region,
  v.city,
  u.user_id
FROM urls u
JOIN url_visits v ON u.id = v.url_id
WHERE u.short_code = $1
ORDER BY v.clicked_at DESC
`

type GetAnalyticsShortcodeRow struct {
	ShortCode   string         `json:"short_code"`
	OriginalUrl string         `json:"original_url"`
	ClickCount  int32          `json:"click_count"`
	ClickedAt   sql.NullTime   `json:"clicked_at"`
	IpAddress   sql.NullString `json:"ip_address"`
	UserAgent   sql.NullString `json:"user_agent"`
	Referrer    sql.NullString `json:"referrer"`
	Country     sql.NullString `json:"country"`
	Region      sql.NullString `json:"region"`
	City        sql.NullString `json:"city"`
	UserID      sql.NullInt32  `json:"user_id"`
}

func (q *Queries) GetAnalyticsShortcode(ctx context.Context, shortCode string) ([]GetAnalyticsShortcodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAnalyticsShortcode, shortCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnalyticsShortcodeRow
	for rows.Next() {
		var i GetAnalyticsShortcodeRow
		if err := rows.Scan(
			&i.ShortCode,
			&i.OriginalUrl,
			&i.ClickCount,
			&i.ClickedAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.Referrer,
			&i.Country,
			&i.Region,
			&i.City,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryStatsScoped = `-- name: GetCountryStatsScoped :many
SELECT
  COALESCE(uv.country, 'unknown') AS country,
  COUNT(*) AS clicks
FROM url_visits uv
JOIN urls u ON u.id = uv.url_id
WHERE u.short_code = $1 AND u.user_id = $2
  AND uv.clicked_at >= NOW() - ($3::int * INTERVAL '1 day')
GROUP BY country
ORDER BY clicks DESC
LIMIT 10
`

type GetCountryStatsScopedParams struct {
	ShortCode string        `json:"short_code"`
	UserID    sql.NullInt32 `json:"user_id"`
	Days      int32         `json:"days"`
}

type GetCountryStatsScopedRow struct {
	Country string `json:"country"`
	Clicks  int64  `json:"clicks"`
}

func (q *Queries) GetCountryStatsScoped(ctx context.Context, arg GetCountryStatsScopedParams) ([]GetCountryStatsScopedRow, error) {
	rows, err := q.db.QueryContext(ctx, getCountryStatsScoped, arg.ShortCode, arg.UserID, arg.Days)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCountryStatsScopedRow
	for rows.Next() {
		var i GetCountryStatsScopedRow
		if err := rows.Scan(&i.Country, &i.Clicks); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryVisitCountsByUser = `-- name: GetCountryVisitCountsByUser :many
SELECT
  COALESCE(uv.country, '') AS country,
  COUNT(*) AS clicks
FROM url_visits uv
JOIN urls u ON uv.url_id = u.id
WHERE u.user_id = $1
  AND uv.clicked_at >= NOW() - ($2::int * INTERVAL '1 day')
  AND uv.country IS NOT NULL
GROUP BY country
ORDER BY clicks DESC
`

type GetCountryVisitCountsByUserParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Days   int32         `json:"days"`
}

type GetCountryVisitCountsByUserRow struct {
	Country string `json:"country"`
	Clicks  int64  `json:"clicks"`
}

func (q *Queries) GetCountryVisitCountsByUser(ctx context.Context, arg GetCountryVisitCountsByUserParams) ([]GetCountryVisitCountsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getCountryVisitCountsByUser, arg.UserID, arg.Days)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCountryVisitCountsByUserRow
	for rows.Next() {
		var i GetCountryVisitCountsByUserRow
		if err := rows.Scan(&i.Country, &i.Clicks); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyClicksAndLinksByUser = `-- name: GetDailyClicksAndLinksByUser :many
SELECT
  d::date AS date,
  COALESCE(clicks.count, 0) AS clicks,
  COALESCE(links.count, 0) AS links
FROM generate_series(
         CURRENT_DATE - INTERVAL '6 days',
         CURRENT_DATE,
         INTERVAL '1 day'
     ) AS d
LEFT JOIN (
    SELECT uv.clicked_at::date AS date, COUNT(*) AS count
    FROM url_visits uv
    INNER JOIN urls u ON uv.url_id = u.id
    WHERE u.user_id = $1
    GROUP BY uv.clicked_at::date
) AS clicks ON clicks.date = d
LEFT JOIN (
    SELECT created_at::date AS date, COUNT(*) AS count
    FROM urls
    WHERE user_id = $1
    GROUP BY created_at::date
) AS links ON links.date = d
ORDER BY d
`

type GetDailyClicksAndLinksByUserRow struct {
	Date   time.Time `json:"date"`
	Clicks int64     `json:"clicks"`
	Links  int64     `json:"links"`
}

func (q *Queries) GetDailyClicksAndLinksByUser(ctx context.Context, userID sql.NullInt32) ([]GetDailyClicksAndLinksByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getDailyClicksAndLinksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDailyClicksAndLinksByUserRow
	for rows.Next() {
		var i GetDailyClicksAndLinksByUserRow
		if err := rows.Scan(&i.Date, &i.Clicks, &i.Links); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyClicksScoped = `-- name: GetDailyClicksScoped :many
SELECT
  DATE(uv.clicked_at) AS date,
  COUNT(*) AS clicks
FROM url_visits uv
JOIN urls u ON u.id = uv.url_id
WHERE u.short_code = $1 AND u.user_id = $2
GROUP BY date
ORDER BY date DESC
LIMIT 7
`

type GetDailyClicksScopedParams struct {
	ShortCode string        `json:"short_code"`
	UserID    sql.NullInt32 `json:"user_id"`
}

type GetDailyClicksScopedRow struct {
	Date   time.Time `json:"date"`
	Clicks int64     `json:"clicks"`
}

func (q *Queries) GetDailyClicksScoped(ctx context.Context, arg GetDailyClicksScopedParams) ([]GetDailyClicksScopedRow, error) {
	rows, err := q.db.QueryContext(ctx, getDailyClicksScoped, arg.ShortCode, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDailyClicksScopedRow
	for rows.Next() {
		var i GetDailyClicksScopedRow
		if err := rows.Scan(&i.Date, &i.Clicks); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDashboardSummaryByUser = `-- name: GetDashboardSummaryByUser :one
SELECT
  COUNT(*) AS total_links,
  COALESCE(SUM(click_count), 0)::BIGINT AS total_clicks,
  COUNT(*) FILTER (
    WHERE (expire_at IS NULL OR expire_at > now())
  ) AS active_links,
  COUNT(*) FILTER (
    WHERE expire_at IS NOT NULL AND expire_at <= now()
  ) AS expired_links
FROM urls
WHERE user_id = $1
`

type GetDashboardSummaryByUserRow struct {
	TotalLinks   int64 `json:"total_links"`
	TotalClicks  int64 `json:"total_clicks"`
	ActiveLinks  int64 `json:"active_links"`
	ExpiredLinks int64 `json:"expired_links"`
}

func (q *Queries) GetDashboardSummaryByUser(ctx context.Context, userID sql.NullInt32) (GetDashboardSummaryByUserRow, error) {
	row := q.db.QueryRowContext(ctx, getDashboardSummaryByUser, userID)
	var i GetDashboardSummaryByUserRow
	err := row.Scan(
		&i.TotalLinks,
		&i.TotalClicks,
		&i.ActiveLinks,
		&i.ExpiredLinks,
	)
	return i, err
}

const getDeviceStatsByShortcode = `-- name: GetDeviceStatsByShortcode :many
SELECT
  COALESCE(uv.device_type, 'unknown') AS device_type,
  COUNT(*) AS count
FROM url_visits uv
INNER JOIN urls u ON uv.url_id = u.id
WHERE u.short_code = $1
GROUP BY device_type
`

type GetDeviceStatsByShortcodeRow struct {
	DeviceType string `json:"device_type"`
	Count      int64  `json:"count"`
}

func (q *Queries) GetDeviceStatsByShortcode(ctx context.Context, shortCode string) ([]GetDeviceStatsByShortcodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceStatsByShortcode, shortCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceStatsByShortcodeRow
	for rows.Next() {
		var i GetDeviceStatsByShortcodeRow
		if err := rows.Scan(&i.DeviceType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceStatsScoped = `-- name: GetDeviceStatsScoped :many
SELECT
  COALESCE(uv.device_type, 'unknown') AS device_type,
  COUNT(*) AS count
FROM url_visits uv
JOIN urls u ON u.id = uv.url_id
WHERE u.short_code = $1 AND u.user_id = $2
GROUP BY uv.device_type
`

type GetDeviceStatsScopedParams struct {
	ShortCode string        `json:"short_code"`
	UserID    sql.NullInt32 `json:"user_id"`
}

type GetDeviceStatsScopedRow struct {
	DeviceType string `json:"device_type"`
	Count      int64  `json:"count"`
}

func (q *Queries) GetDeviceStatsScoped(ctx context.Context, arg GetDeviceStatsScopedParams) ([]GetDeviceStatsScopedRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceStatsScoped, arg.ShortCode, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceStatsScopedRow
	for rows.Next() {
		var i GetDeviceStatsScopedRow
		if err := rows.Scan(&i.DeviceType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceTypeStatsByShortCode = `-- name: GetDeviceTypeStatsByShortCode :many
SELECT
  COALESCE(device_type, 'unknown') AS device_type,
  COUNT(*) AS count
FROM url_visits v
JOIN urls u ON u.id = v.url_id
WHERE u.short_code = $1
GROUP BY device_type
`

type GetDeviceTypeStatsByShortCodeRow struct {
	DeviceType string `json:"device_type"`
	Count      int64  `json:"count"`
}

func (q *Queries) GetDeviceTypeStatsByShortCode(ctx context.Context, shortCode string) ([]GetDeviceTypeStatsByShortCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceTypeStatsByShortCode, shortCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceTypeStatsByShortCodeRow
	for rows.Next() {
		var i GetDeviceTypeStatsByShortCodeRow
		if err := rows.Scan(&i.DeviceType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceTypeStatsByUser = `-- name: GetDeviceTypeStatsByUser :many
SELECT
  COALESCE(uv.device_type, 'unknown') AS device_type,
  COUNT(*) AS count
FROM url_visits uv
INNER JOIN urls u ON uv.url_id = u.id
WHERE u.user_id = $1
GROUP BY uv.device_type
`

type GetDeviceTypeStatsByUserRow struct {
	DeviceType string `json:"device_type"`
	Count      int64  `json:"count"`
}

func (q *Queries) GetDeviceTypeStatsByUser(ctx context.Context, userID sql.NullInt32) ([]GetDeviceTypeStatsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceTypeStatsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceTypeStatsByUserRow
	for rows.Next() {
		var i GetDeviceTypeStatsByUserRow
		if err := rows.Scan(&i.DeviceType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyClicksByUser = `-- name: GetMonthlyClicksByUser :many
SELECT DATE_TRUNC('month', url_visits.clicked_at)::date AS month,
      COUNT(*) AS click_count
      FROM url_visits
LEFT JOIN urls ON url_visits.url_id = urls.id
WHERE urls.user_id = $1
  AND url_visits.clicked_at >= NOW() - INTERVAL '1 year'
GROUP BY month
`

type GetMonthlyClicksByUserRow struct {
	Month      time.Time `json:"month"`
	ClickCount int64     `json:"click_count"`
}

func (q *Queries) GetMonthlyClicksByUser(ctx context.Context, userID sql.NullInt32) ([]GetMonthlyClicksByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyClicksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyClicksByUserRow
	for rows.Next() {
		var i GetMonthlyClicksByUserRow
		if err := rows.Scan(&i.Month, &i.ClickCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyClicksScoped = `-- name: GetMonthlyClicksScoped :many
SELECT
  DATE_TRUNC('month', uv.clicked_at)::date AS month,
  COUNT(*) AS click_count
FROM url_visits uv
JOIN urls u ON u.id = uv.url_id
WHERE u.short_code = $1 AND u.user_id = $2
  AND uv.clicked_at >= NOW() - INTERVAL '1 year'
GROUP BY month
ORDER BY month
`

type GetMonthlyClicksScopedParams struct {
	ShortCode string        `json:"short_code"`
	UserID    sql.NullInt32 `json:"user_id"`
}

type GetMonthlyClicksScopedRow struct {
	Month      time.Time `json:"month"`
	ClickCount int64     `json:"click_count"`
}

func (q *Queries) GetMonthlyClicksScoped(ctx context.Context, arg GetMonthlyClicksScopedParams) ([]GetMonthlyClicksScopedRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyClicksScoped, arg.ShortCode, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyClicksScopedRow
	for rows.Next() {
		var i GetMonthlyClicksScopedRow
		if err := rows.Scan(&i.Month, &i.ClickCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOriginalURL = `-- name: GetOriginalURL :one
SELECT id, original_url, title, short_code, thumbnail, click_count, password_hash, created_at, expire_at, user_id FROM urls
WHERE short_code = $1
LIMIT 1
`

func (q *Queries) GetOriginalURL(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getOriginalURL, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Title,
		&i.ShortCode,
		&i.Thumbnail,
		&i.ClickCount,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ExpireAt,
		&i.UserID,
	)
	return i, err
}

const getTitleAndUrlByUser = `-- name: GetTitleAndUrlByUser :many
SELECT 
  id,
  title,
  short_code
FROM urls
WHERE user_id = $1
`

type GetTitleAndUrlByUserRow struct {
	ID        int32          `json:"id"`
	Title     sql.NullString `json:"title"`
	ShortCode string         `json:"short_code"`
}

func (q *Queries) GetTitleAndUrlByUser(ctx context.Context, userID sql.NullInt32) ([]GetTitleAndUrlByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getTitleAndUrlByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTitleAndUrlByUserRow
	for rows.Next() {
		var i GetTitleAndUrlByUserRow
		if err := rows.Scan(&i.ID, &i.Title, &i.ShortCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT id, original_url, title, short_code, thumbnail, click_count, password_hash, created_at, expire_at, user_id FROM urls
WHERE short_code = $1
LIMIT 1
`

func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByShortCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Title,
		&i.ShortCode,
		&i.Thumbnail,
		&i.ClickCount,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ExpireAt,
		&i.UserID,
	)
	return i, err
}

const getURLVisits = `-- name: GetURLVisits :many
SELECT id, url_id, user_id, ip_address, user_agent, device_type, referrer, country, region, city, clicked_at FROM url_visits
WHERE url_id = $1
ORDER BY clicked_at DESC
`

func (q *Queries) GetURLVisits(ctx context.Context, urlID int32) ([]UrlVisit, error) {
	rows, err := q.db.QueryContext(ctx, getURLVisits, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UrlVisit
	for rows.Next() {
		var i UrlVisit
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.DeviceType,
			&i.Referrer,
			&i.Country,
			&i.Region,
			&i.City,
			&i.ClickedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlsByUserID = `-- name: GetUrlsByUserID :many
SELECT 
  id,
  original_url,
  title,
  short_code,
  thumbnail,
  click_count,
  password_hash,
  created_at,
  expire_at,
  user_id
FROM urls
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUrlsByUserID(ctx context.Context, userID sql.NullInt32) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getUrlsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.Title,
			&i.ShortCode,
			&i.Thumbnail,
			&i.ClickCount,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.ExpireAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users
WHERE provider = $1 AND provider_id = $2
LIMIT 1
`

type GetUserByProviderParams struct {
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProvider, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderID = `-- name: GetUserByProviderID :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users
WHERE provider = $1 AND provider_id = $2
LIMIT 1
`

type GetUserByProviderIDParams struct {
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
}

func (q *Queries) GetUserByProviderID(ctx context.Context, arg GetUserByProviderIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderID, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, ip_address, provider, provider_id, image, created_at, updated_at FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IpAddress,
		&i.Provider,
		&i.ProviderID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementClickCount = `-- name: IncrementClickCount :exec
UPDATE urls
SET click_count = click_count + 1
WHERE short_code = $1
`

func (q *Queries) IncrementClickCount(ctx context.Context, shortCode string) error {
	_, err := q.db.ExecContext(ctx, incrementClickCount, shortCode)
	return err
}

const logURLVisit = `-- name: LogURLVisit :exec
INSERT INTO url_visits (
  url_id,
  user_id,
  ip_address,
  device_type,
  user_agent,
  referrer,
  country,
  region,
  city
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type LogURLVisitParams struct {
	UrlID      int32          `json:"url_id"`
	UserID     sql.NullInt32  `json:"user_id"`
	IpAddress  sql.NullString `json:"ip_address"`
	DeviceType sql.NullString `json:"device_type"`
	UserAgent  sql.NullString `json:"user_agent"`
	Referrer   sql.NullString `json:"referrer"`
	Country    sql.NullString `json:"country"`
	Region     sql.NullString `json:"region"`
	City       sql.NullString `json:"city"`
}

func (q *Queries) LogURLVisit(ctx context.Context, arg LogURLVisitParams) error {
	_, err := q.db.ExecContext(ctx, logURLVisit,
		arg.UrlID,
		arg.UserID,
		arg.IpAddress,
		arg.DeviceType,
		arg.UserAgent,
		arg.Referrer,
		arg.Country,
		arg.Region,
		arg.City,
	)
	return err
}

const updateShortURL = `-- name: UpdateShortURL :one
UPDATE urls
SET 
  original_url = $1,
  title = $2,
  expire_at = $3,
  password_hash = $4
WHERE short_code = $5
RETURNING id, original_url, title, short_code, thumbnail, click_count, password_hash, created_at, expire_at, user_id
`

type UpdateShortURLParams struct {
	OriginalUrl  string         `json:"original_url"`
	Title        sql.NullString `json:"title"`
	ExpireAt     sql.NullTime   `json:"expire_at"`
	PasswordHash sql.NullString `json:"password_hash"`
	ShortCode    string         `json:"short_code"`
}

func (q *Queries) UpdateShortURL(ctx context.Context, arg UpdateShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateShortURL,
		arg.OriginalUrl,
		arg.Title,
		arg.ExpireAt,
		arg.PasswordHash,
		arg.ShortCode,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Title,
		&i.ShortCode,
		&i.Thumbnail,
		&i.ClickCount,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ExpireAt,
		&i.UserID,
	)
	return i, err
}
